TS
colSums(is.na(TS))
colSums(TS == 0)
TS %>%
drop_na(Age, Fare, Embarked) %>%
select(-PassengerId, -Name, -Cabin, -Ticket) %>%
mutate(Sex = as.factor(Sex),
Embarked = as.factor(Embarked),
Age_rounded = round(Age/10)*10) %>%
select(-Age)-> TS
# par(mfrow=c(3,3))
# hist(TS$Survived)
# hist(TS$Pclass)
# plot(TS$Sex)
# hist(TS$Age)
# hist(TS$SibSp)
# hist(TS$Parch)
# # hist(log(TS$SibSp))
# # hist(log(TS$Parch))
# hist(log(TS$Fare))
# plot(TS$Embarked)
# summary(TS)
TS %>%
keep(is.numeric) %>%
cor()
ggplot(TS,aes(x=Pclass,y=Survived))+
geom_point(alpha=0.5)+
geom_smooth(color="red", linetype="dashed", se=FALSE)+
stat_smooth(method="glm",se=FALSE,method.args = list(family=binomial)) +
theme_bw() +
ylab("Propability")
ggplot(TS,aes(x=Sex,y=Survived))+
geom_point(alpha=0.5)+
geom_smooth(color="red", linetype="dashed", se=FALSE)+
stat_smooth(method="glm",se=FALSE,method.args = list(family=binomial)) +
theme_bw() +
ylab("Propability")
ggplot(TS,aes(x=Age,y=Survived))+
geom_point(alpha=0.5)+
geom_smooth(color="red", linetype="dashed", se=FALSE)+
stat_smooth(method="glm",se=FALSE,method.args = list(family=binomial)) +
theme_bw() +
ylab("Propability")
#Loading caret library
library(caret)
set.seed(123)
smp_size <- floor(0.9 * nrow(TS))
train_ind <- sample(seq_len(nrow(TS)), size = smp_size)
train <- TS[train_ind, ]
test <- TS[-train_ind, ]
# defining training control as
# repeated cross-validation and
# value of K is 10 and repetition is 3 times
train_control <- trainControl(method = "repeatedcv",
number = 10, repeats = 3)
# Lasso
#define response variable
lasso_yTS <- train$Survived
#define matrix of predictor variables
lasso_xTS <- data.matrix(train[, c('Pclass', 'Sex', 'Age_rounded', 'SibSp')])
# Survived ~ Pclass + Sex + as.factor(Age_rounded) + SibSp
library(glmnet)
#perform k-fold cross-validation to find optimal lambda value
cv_model <- cv.glmnet(lasso_xTS, lasso_yTS, alpha = 1)
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda # The lambda value that minimizes the test MSE
#produce plot of test MSE by lambda value
plot(cv_model)
best_model <- glmnet(lasso_xTS, lasso_yTS, alpha = 1, lambda = best_lambda)
coef(best_model)
#define new observation
new = data.matrix(test[, c('Pclass', 'Sex', 'Age_rounded', 'SibSp')])
#use lasso regression model to predict response value
TF <- predict(best_model, s = best_lambda, newx = new)>0.5
TF1 <- ifelse(TF == T, 1, 0)
confusionMatrix(table(TF1, test$Survived))
scutted
# Lasso
#define response variable
lasso_ycdtgyDF <- scutted$NSP
#define matrix of predictor variables
lasso_xcdtgyDF <- data.matrix(scutted[, 1:21])
# Survived ~ Pclass + Sex + as.factor(Age_rounded) + SibSp
library(glmnet)
#perform k-fold cross-validation to find optimal lambda value
set.seed(15)
cv_model <- cv.glmnet(lasso_xcdtgyDF, lasso_ycdtgyDF, alpha = 1, family = "multinomial",
trControl = train_control)
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda # The lambda value that minimizes the test MSE
#produce plot of test MSE by lambda value
plot(cv_model)
best_model <- glmnet(lasso_xcdtgyDF, lasso_ycdtgyDF, alpha = 1, lambda = best_lambda, family = "multinomial")
coef(best_model)
#define new observation
new = data.matrix(test[, 1:22])
#define new observation
new = data.matrix(test[, 1:21])
test[, 1:21]
test
library(caret)
set.seed(40)
smp_size <- floor(0.9 * nrow(cdtgyDF))
train_ind <- sample(seq_len(nrow(cdtgyDF)), size = smp_size)
train <- cdtgyDF[train_ind, ]
test <- cdtgyDF[-train_ind, ]
train_control <- trainControl(method = "repeatedcv",
number = 10, repeats = 3)
library(scutr)
scutted <- SCUT(train, "NSP", undersample = undersample_kmeans,
usamp_opts = list(k=7))
table(scutted$NSP)
# Lasso
#define response variable
lasso_ycdtgyDF <- scutted$NSP
#define matrix of predictor variables
lasso_xcdtgyDF <- data.matrix(scutted[, 1:21])
# Survived ~ Pclass + Sex + as.factor(Age_rounded) + SibSp
library(glmnet)
#perform k-fold cross-validation to find optimal lambda value
set.seed(15)
cv_model <- cv.glmnet(lasso_xcdtgyDF, lasso_ycdtgyDF, alpha = 1, family = "multinomial",
trControl = train_control)
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda # The lambda value that minimizes the test MSE
#produce plot of test MSE by lambda value
plot(cv_model)
best_model <- glmnet(lasso_xcdtgyDF, lasso_ycdtgyDF, alpha = 1, lambda = best_lambda, family = "multinomial")
coef(best_model)
#define new observation
new = data.matrix(test[, 1:21])
#use lasso regression model to predict response value
cdtgyDFF <- predict(best_model, s = best_lambda, newx = new, type = "response")
cdtgyDFF1 <- as.tibble(cdtgyDFF)
cdtgyDFF1$Max <- pmax(cdtgyDFF1$`1.1`, cdtgyDFF1$`2.1`, cdtgyDFF1$`3.1`)
cdtgyDFF1 %>% mutate(rank = case_when(Max == cdtgyDFF1[1] ~ "1",
Max == cdtgyDFF1[2] ~ "2",
Max == cdtgyDFF1[3] ~ "3")) -> cdtgyDFF1
confusionMatrix(table(cdtgyDFF1$rank, test$NSP))
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
install.packages("shinycssloaders")
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
leo2_weapon<- readRDS("../data/leo2.weapon.RDS")
leo2_weapon
leo2_weapon %>%
leo2_weapon
leo2_weapon
leo2_weapon %>%
filter(DATA_YEAR == 2020) %>%
filter(STATE == "California") %>%
select(STATE,others_race:Hawaiian_pop) %>%
unique() %>%
summarize(
others_race = sum(others_race,na.rm=TRUE),
Asian_pop = sum(Asian_pop,na.rm=TRUE),
Black_pop = sum(Black_pop,na.rm=TRUE),
White_pop = sum(White_pop,na.rm=TRUE),
Indian_pop = sum(Indian_pop,na.rm=TRUE),
Hawaiian_pop = sum(Hawaiian_pop,na.rm=TRUE)
) %>%
pivot_longer(
cols = (others_race:Hawaiian_pop),
names_to = "race",
values_to = "pop"
) %>%
mutate(
perc = pop / sum(pop),
ymax = cumsum(perc),
ymin = ifelse(is.na(lag(ymax)), 0, lag(ymax))
) %>%
ggplot() +
geom_rect(aes(ymin = ymin, ymax = ymax, fill = race, xmin = 2, xmax = 4)) +
coord_polar(theta = "y", start = 1) +
theme_void() +
xlim(c(-1, 4)) +
geom_text(aes(x = 3.5, y = perc, label = paste0(race, "\n", round(perc * 100, 1), "%")),
position = position_stack(vjust = 0.5), size = 2.5
)
leo2_weapon %>%
filter(DATA_YEAR == 2020) %>%
filter(STATE == "California") %>%
select(STATE,others_race:Hawaiian_pop) %>%
unique() %>%
summarize(
others_race = sum(others_race,na.rm=TRUE),
Asian_pop = sum(Asian_pop,na.rm=TRUE),
Black_pop = sum(Black_pop,na.rm=TRUE),
White_pop = sum(White_pop,na.rm=TRUE),
Indian_pop = sum(Indian_pop,na.rm=TRUE),
Hawaiian_pop = sum(Hawaiian_pop,na.rm=TRUE)
) %>%
pivot_longer(
cols = (others_race:Hawaiian_pop),
names_to = "race",
values_to = "pop"
)
leo2_weapon %>%
filter(DATA_YEAR == 2020) %>%
filter(STATE == "California") %>%
select(STATE,others_race:Hawaiian_pop) %>%
unique() %>%
summarize(
others_race = sum(others_race,na.rm=TRUE),
Asian_pop = sum(Asian_pop,na.rm=TRUE),
Black_pop = sum(Black_pop,na.rm=TRUE),
White_pop = sum(White_pop,na.rm=TRUE),
Indian_pop = sum(Indian_pop,na.rm=TRUE),
Hawaiian_pop = sum(Hawaiian_pop,na.rm=TRUE)
) %>%
pivot_longer(
cols = (others_race:Hawaiian_pop),
names_to = "race",
values_to = "pop"
) %>%
ggplot(aes(x = race)) +
geom_histogram() +
coord_polar(theta = "y", start = 1)
leo2_weapon %>%
filter(DATA_YEAR == 2020) %>%
filter(STATE == "California") %>%
select(STATE,others_race:Hawaiian_pop) %>%
unique() %>%
summarize(
others_race = sum(others_race,na.rm=TRUE),
Asian_pop = sum(Asian_pop,na.rm=TRUE),
Black_pop = sum(Black_pop,na.rm=TRUE),
White_pop = sum(White_pop,na.rm=TRUE),
Indian_pop = sum(Indian_pop,na.rm=TRUE),
Hawaiian_pop = sum(Hawaiian_pop,na.rm=TRUE)
) %>%
pivot_longer(
cols = (others_race:Hawaiian_pop),
names_to = "race",
values_to = "pop"
) %>%
ggplot(aes(x = race)) +
geom_histogram() +
theme_void()
leo2_weapon %>%
filter(DATA_YEAR == 2020) %>%
filter(STATE == "California") %>%
select(STATE,others_race:Hawaiian_pop) %>%
unique() %>%
summarize(
others_race = sum(others_race,na.rm=TRUE),
Asian_pop = sum(Asian_pop,na.rm=TRUE),
Black_pop = sum(Black_pop,na.rm=TRUE),
White_pop = sum(White_pop,na.rm=TRUE),
Indian_pop = sum(Indian_pop,na.rm=TRUE),
Hawaiian_pop = sum(Hawaiian_pop,na.rm=TRUE)
) %>%
pivot_longer(
cols = (others_race:Hawaiian_pop),
names_to = "race",
values_to = "pop"
) %>%
ggplot(aes(x = race)) +
geom_histogram()
leo2_weapon %>%
filter(DATA_YEAR == 2020) %>%
filter(STATE == "California") %>%
select(STATE,others_race:Hawaiian_pop) %>%
unique() %>%
summarize(
others_race = sum(others_race,na.rm=TRUE),
Asian_pop = sum(Asian_pop,na.rm=TRUE),
Black_pop = sum(Black_pop,na.rm=TRUE),
White_pop = sum(White_pop,na.rm=TRUE),
Indian_pop = sum(Indian_pop,na.rm=TRUE),
Hawaiian_pop = sum(Hawaiian_pop,na.rm=TRUE)
) %>%
pivot_longer(
cols = (others_race:Hawaiian_pop),
names_to = "race",
values_to = "pop"
)
leo2_weapon %>%
filter(DATA_YEAR == 2020) %>%
filter(STATE == "California") %>%
select(STATE,others_race:Hawaiian_pop) %>%
unique() %>%
summarize(
others_race = sum(others_race,na.rm=TRUE),
Asian_pop = sum(Asian_pop,na.rm=TRUE),
Black_pop = sum(Black_pop,na.rm=TRUE),
White_pop = sum(White_pop,na.rm=TRUE),
Indian_pop = sum(Indian_pop,na.rm=TRUE),
Hawaiian_pop = sum(Hawaiian_pop,na.rm=TRUE)
) %>%
pivot_longer(
cols = (others_race:Hawaiian_pop),
names_to = "race",
values_to = "pop"
) %>%
ggplot(aes(x = race, y = pop)) +
geom_histogram()
leo2_weapon %>%
filter(DATA_YEAR == 2020) %>%
filter(STATE == "California") %>%
select(STATE,others_race:Hawaiian_pop) %>%
unique() %>%
summarize(
others_race = sum(others_race,na.rm=TRUE),
Asian_pop = sum(Asian_pop,na.rm=TRUE),
Black_pop = sum(Black_pop,na.rm=TRUE),
White_pop = sum(White_pop,na.rm=TRUE),
Indian_pop = sum(Indian_pop,na.rm=TRUE),
Hawaiian_pop = sum(Hawaiian_pop,na.rm=TRUE)
) %>%
pivot_longer(
cols = (others_race:Hawaiian_pop),
names_to = "race",
values_to = "pop"
)
leo2_weapon %>%
filter(DATA_YEAR == 2020) %>%
filter(STATE == "California") %>%
select(STATE,others_race:Hawaiian_pop) %>%
unique() %>%
summarize(
others_race = sum(others_race,na.rm=TRUE),
Asian_pop = sum(Asian_pop,na.rm=TRUE),
Black_pop = sum(Black_pop,na.rm=TRUE),
White_pop = sum(White_pop,na.rm=TRUE),
Indian_pop = sum(Indian_pop,na.rm=TRUE),
Hawaiian_pop = sum(Hawaiian_pop,na.rm=TRUE)
) %>%
pivot_longer(
cols = (others_race:Hawaiian_pop),
names_to = "race",
values_to = "pop"
) %>%
ggplot(aes(x = race, y = pop)) +
geom_bar()
leo2_weapon %>%
filter(DATA_YEAR == 2020) %>%
filter(STATE == "California") %>%
select(STATE,others_race:Hawaiian_pop) %>%
unique() %>%
summarize(
others_race = sum(others_race,na.rm=TRUE),
Asian_pop = sum(Asian_pop,na.rm=TRUE),
Black_pop = sum(Black_pop,na.rm=TRUE),
White_pop = sum(White_pop,na.rm=TRUE),
Indian_pop = sum(Indian_pop,na.rm=TRUE),
Hawaiian_pop = sum(Hawaiian_pop,na.rm=TRUE)
) %>%
pivot_longer(
cols = (others_race:Hawaiian_pop),
names_to = "race",
values_to = "pop"
) %>%
ggplot(aes(x = as.factor(race), y = pop)) +
geom_bar()
leo2_weapon %>%
filter(DATA_YEAR == 2020) %>%
filter(STATE == "California") %>%
select(STATE,others_race:Hawaiian_pop) %>%
unique() %>%
summarize(
others_race = sum(others_race,na.rm=TRUE),
Asian_pop = sum(Asian_pop,na.rm=TRUE),
Black_pop = sum(Black_pop,na.rm=TRUE),
White_pop = sum(White_pop,na.rm=TRUE),
Indian_pop = sum(Indian_pop,na.rm=TRUE),
Hawaiian_pop = sum(Hawaiian_pop,na.rm=TRUE)
) %>%
pivot_longer(
cols = (others_race:Hawaiian_pop),
names_to = "race",
values_to = "pop"
) %>%
ggplot(aes(x = as.factor(race))) +
geom_bar()
leo2_weapon %>%
filter(DATA_YEAR == 2020) %>%
filter(STATE == "California") %>%
select(STATE,others_race:Hawaiian_pop) %>%
unique() %>%
summarize(
others_race = sum(others_race,na.rm=TRUE),
Asian_pop = sum(Asian_pop,na.rm=TRUE),
Black_pop = sum(Black_pop,na.rm=TRUE),
White_pop = sum(White_pop,na.rm=TRUE),
Indian_pop = sum(Indian_pop,na.rm=TRUE),
Hawaiian_pop = sum(Hawaiian_pop,na.rm=TRUE)
)
leo2_weapon %>%
filter(DATA_YEAR == 2020) %>%
filter(STATE == "California") %>%
select(STATE,others_race:Hawaiian_pop) %>%
unique() %>%
summarize(
others_race = sum(others_race,na.rm=TRUE),
Asian_pop = sum(Asian_pop,na.rm=TRUE),
Black_pop = sum(Black_pop,na.rm=TRUE),
White_pop = sum(White_pop,na.rm=TRUE),
Indian_pop = sum(Indian_pop,na.rm=TRUE),
Hawaiian_pop = sum(Hawaiian_pop,na.rm=TRUE)
) %>%
pivot_longer(
cols = (others_race:Hawaiian_pop),
names_to = "race",
values_to = "pop"
)
leo2_weapon %>%
filter(DATA_YEAR == 2020) %>%
filter(STATE == "California") %>%
select(STATE,others_race:Hawaiian_pop) %>%
unique() %>%
summarize(
others_race = sum(others_race,na.rm=TRUE),
Asian_pop = sum(Asian_pop,na.rm=TRUE),
Black_pop = sum(Black_pop,na.rm=TRUE),
White_pop = sum(White_pop,na.rm=TRUE),
Indian_pop = sum(Indian_pop,na.rm=TRUE),
Hawaiian_pop = sum(Hawaiian_pop,na.rm=TRUE)
) %>%
pivot_longer(
cols = (others_race:Hawaiian_pop),
names_to = "race",
values_to = "pop"
) %>%
ggplot(aes(x = as.factor(race))) +
geom_histogram()
leo2_weapon %>%
filter(DATA_YEAR == 2020) %>%
filter(STATE == "California") %>%
select(STATE,others_race:Hawaiian_pop) %>%
unique() %>%
summarize(
others_race = sum(others_race,na.rm=TRUE),
Asian_pop = sum(Asian_pop,na.rm=TRUE),
Black_pop = sum(Black_pop,na.rm=TRUE),
White_pop = sum(White_pop,na.rm=TRUE),
Indian_pop = sum(Indian_pop,na.rm=TRUE),
Hawaiian_pop = sum(Hawaiian_pop,na.rm=TRUE)
) %>%
pivot_longer(
cols = (others_race:Hawaiian_pop),
names_to = "race",
values_to = "pop"
) %>%
ggplot(aes(x = race)) +
geom_histogram()
leo2_weapon %>%
filter(DATA_YEAR == 2020) %>%
filter(STATE == "California") %>%
select(STATE,others_race:Hawaiian_pop) %>%
unique() %>%
summarize(
others_race = sum(others_race,na.rm=TRUE),
Asian_pop = sum(Asian_pop,na.rm=TRUE),
Black_pop = sum(Black_pop,na.rm=TRUE),
White_pop = sum(White_pop,na.rm=TRUE),
Indian_pop = sum(Indian_pop,na.rm=TRUE),
Hawaiian_pop = sum(Hawaiian_pop,na.rm=TRUE)
) %>%
pivot_longer(
cols = (others_race:Hawaiian_pop),
names_to = "race",
values_to = "pop"
) %>%
ggplot(aes(x = race, y = pop)) +
geom_col()
leo2_weapon %>%
filter(DATA_YEAR == 2020) %>%
filter(STATE == "California") %>%
select(STATE,others_race:Hawaiian_pop) %>%
unique() %>%
summarize(
others_race = sum(others_race,na.rm=TRUE),
Asian_pop = sum(Asian_pop,na.rm=TRUE),
Black_pop = sum(Black_pop,na.rm=TRUE),
White_pop = sum(White_pop,na.rm=TRUE),
Indian_pop = sum(Indian_pop,na.rm=TRUE),
Hawaiian_pop = sum(Hawaiian_pop,na.rm=TRUE)
) %>%
pivot_longer(
cols = (others_race:Hawaiian_pop),
names_to = "race",
values_to = "pop"
) %>%
ggplot(aes(x = sym(race), y = pop)) +
geom_col()
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
