ggplot(data = datadf2) +
geom_boxplot(mapping = aes(x = votes, y = country, group = country)) +
theme_bw()+
labs(x = "Votes", title = "IMDB Votes per Top 100 Foreign Films \n by Country")+
theme(axis.title.y = element_blank()) +
scale_x_continuous(trans = "log10")
ggplot(data = datadf2) +
geom_boxplot(mapping = aes(x = votes, y = country, group = country)) +
theme_bw()+
labs(x = "Votes", title = "IMDB Votes per Top 100 Foreign Films \n by Country")+
theme(axis.title.y = element_blank())
dfdata2
datadf2
transform(datadf2, votes = as.numeric(votes))
datadf2 %>%
mutate(rank = parse_number(rank),
votes = parse_number(votes),
year = parse_number(year),
minutes = parse_number(minutes),
genre = str_replace_all(genre, "\\n", ""),
genre = str_squish(genre),
starRating = parse_number(starRating),
metascore = str_replace_all(metascore, "\\n", ""),
metascore = str_extract(metascore, "\\d{0,3}"),
metascore = parse_number(metascore),
gross = parse_number(gross),
country = str_replace_all(country, "From", ""),
country = factor(str_squish(country)),
movienum = NULL
) -> datadf2
datadf %>%
mutate(key = case_when(ismovierank ~ "rank",
isname ~ "name",
isyear ~ "year",
ismpaa ~"MPAA",
ismins ~ "minutes",
isgenre ~ "genre",
isstar ~ "starRating",
ismeta ~ "metascore",
isrec ~ "gross",
iscountry ~ "country",
isvote ~ "votes")) %>%
select(key, text, movienum) %>%
pivot_wider(names_from = key,
values_from = text) -> datadf2
datadf2 %>%
mutate(rank = parse_number(rank),
votes = parse_number(votes),
year = parse_number(year),
minutes = parse_number(minutes),
genre = str_replace_all(genre, "\\n", ""),
genre = str_squish(genre),
starRating = parse_number(starRating),
metascore = str_replace_all(metascore, "\\n", ""),
metascore = str_extract(metascore, "\\d{0,3}"),
metascore = parse_number(metascore),
gross = parse_number(gross),
country = str_replace_all(country, "From", ""),
country = factor(str_squish(country)),
movienum = NULL
) -> datadf2
head(datadf2)
datadf2 %>%
summarise(across(everything(), ~ sum(is.na(.x)))) %>%
pivot_longer(everything(), names_to = "element", values_to = "count") %>%
arrange(desc(count)) %>%
filter(count > 0) -> missing1
missing1
missing1 %>%
summarise(sum(count)) %>%
rename(total_missing = "sum(count)")
datadf2 %>%
mutate(MPAA = recode(MPAA, "Unrated" = "Not Rated")) %>%
replace_na(list(MPAA = "Not Rated")) %>%
group_by(MPAA) %>%
count(MPAA) %>%
filter(n >4)-> mpaa2
mpaa2
datadf2 %>%
filter(MPAA == "Not Rated" | MPAA == "PG" | MPAA == "PG-13" | MPAA == "R") %>%
filter(!is.na(gross)) -> plot1
ggplot(data = plot1, mapping = aes(x = minutes, y = gross, color = MPAA)) +
geom_point() +
stat_smooth(method = "lm", formula = y ~ x, se = FALSE) +
theme_bw() +
labs(x = "Duration in Minutes",
y = "Gross Receipts - Millions")
datadf2 %>%
filter(!is.na(metascore)) %>%
mutate(MPAA = recode(MPAA, "Unrated" = "Not Rated")) %>%
replace_na(list(MPAA = "Not Rated")) -> plot2
ggplot(data = plot2, mapping = aes(x = metascore, y = starRating, color = MPAA)) +
geom_point() +
geom_smooth(method = lm,se=F,aes(group=1),color='black') +
theme_bw() +
labs(x = "Meta Score",
y = "Stars Rating")
reg <- lm(plot2$starRating ~ plot2$metascore)
summary(reg)
ggplot(data = datadf2) +
geom_boxplot(mapping = aes(x = votes, y = country, group = country)) +
theme_bw()+
labs(x = "Votes", title = "IMDB Votes per Top 100 Foreign Films \n by Country")+
theme(axis.title.y = element_blank())
ggplot(data = datadf2) +
geom_boxplot(mapping = aes(x = votes, y = country, group = country)) +
theme_bw()+
labs(x = "Votes", title = "IMDB Votes per Top 100 Foreign Films \n by Country")+
theme(axis.title.y = element_blank()) +
scale_x_continuous(trans='log10')
ggplot(data = datadf2) +
geom_boxplot(mapping = aes(x = votes, y = reorder(country, votes), group = country)) +
theme_bw()+
labs(x = "Votes", title = "IMDB Votes per Top 100 Foreign Films \n by Country")+
theme(axis.title.y = element_blank()) +
scale_x_continuous(trans='log10')
ggplot(data = datadf2) +
geom_boxplot(mapping = aes(x = votes, y = reorder(country, -votes), group = country)) +
theme_bw()+
labs(x = "Votes", title = "IMDB Votes per Top 100 Foreign Films \n by Country")+
theme(axis.title.y = element_blank()) +
scale_x_continuous(trans='log10')
ggplot(data = datadf2) +
geom_boxplot(mapping = aes(x = votes, y = reorder(country, votes), group = country)) +
theme_bw()+
labs(x = "Votes", title = "IMDB Votes per Top 100 Foreign Films \n by Country")+
theme(axis.title.y = element_blank()) +
scale_x_continuous(trans='log10')
ggplot(data = datadf2) +
geom_boxplot(mapping = aes(x = votes, y = reorder(country, votes))) +
theme_bw()+
labs(x = "Votes", title = "IMDB Votes per Top 100 Foreign Films \n by Country")+
theme(axis.title.y = element_blank()) +
scale_x_continuous(trans='log10')
ggplot(data = datadf2) +
geom_boxplot(mapping = aes(x = votes, y = factor(country, level = level_order))) +
theme_bw()+
labs(x = "Votes", title = "IMDB Votes per Top 100 Foreign Films \n by Country")+
theme(axis.title.y = element_blank()) +
scale_x_continuous(trans='log10')
ggplot(data = datadf2) +
geom_boxplot(mapping = aes(x = votes, y = fct_reorder(country, votes))) +
theme_bw()+
labs(x = "Votes", title = "IMDB Votes per Top 100 Foreign Films \n by Country")+
theme(axis.title.y = element_blank()) +
scale_x_continuous(trans='log10')
ggplot(data = datadf2) +
geom_boxplot(mapping = aes(x = votes, y = order(country, votes))) +
theme_bw()+
labs(x = "Votes", title = "IMDB Votes per Top 100 Foreign Films \n by Country")+
theme(axis.title.y = element_blank()) +
scale_x_continuous(trans='log10')
ggplot(data = datadf2) +
geom_boxplot(mapping = aes(x = votes, y = reorder(country, votes))) +
theme_bw()+
labs(x = "Votes", title = "IMDB Votes per Top 100 Foreign Films \n by Country")+
theme(axis.title.y = element_blank()) +
scale_x_continuous(trans='log10')
get_sentiments()
get_sentiments("afinn")
library(tidytext)
install.packages(tidytext)
library(tidytext)
library(dplyr)
get_sentiments("afinn")
install.packages("RedditExtractoR")
libary(RedditExctractoR)
library(RedditExctractoR)
install.packages("RedditExtractoR")
library(RedditExctractoR)
library(RedditExtractoR)
redgeo <- get_reddit(subreddit = "geopolitics", page_threshold = 5, sort_by = "comments")
library(RedditExtractoR)
redgeo <- get_reddit(subreddit = "geopolitics", page_threshold = 5, sort_by = "comments")
getcontent <- get_reddit(
search_terms = "Tolkien",
page_threshold = 1,
cn_threshold = 2500
)
library(RedditExctractoR)
library(RedditExtractoR)
getcontent <- find_subreddits("ukraine")
getcontent
view(getcontent)
getcontent <- find_thread_urls( keywords = NA, sort_by = "top", subreddit = "geopolitics", period = "month" )
view(getcontent)
getcontent <- find_thread_urls(keywords="ukraine", subreddit="geopolitics", sort_by="comment", period="month")
getcontent <- find_thread_urls(keywords="ukraine", subreddit="geopolitics", sort_by="new", period="month")
view(getcontent)
url <- ("https://www.reddit.com/r/geopolitics/")
getcontent <- get_thread_content(url)
view(getcontent)
getcontent <- get_thread_content(https://www.reddit.com/r/geopolitics/comments/t020va/russia_invasion_of_ukraine_live_thread/)
getcontent <- get_thread_content("https://www.reddit.com/r/geopolitics/comments/t020va/russia_invasion_of_ukraine_live_thread/")
view(getcontent)
library(SentimentAnalysis)
install.packages("SentimentAnalysis")
library(SentimentAnalysis)
names(getcontent)
getcontent$comments
view(getcontent$comments)
view(getcontent$threads)
getcontent <- get_thread_content("https://www.reddit.com/r/geopolitics/")
view(getcontent)
getcontent <- get_thread_content("https://www.reddit.com/r/geopolitics/")
getcontent <- get_thread_content("https://www.reddit.com/r/geopolitics/")
getcontent <- get_thread_content("https://www.reddit.com/r/geopolitics/comments/t020va/russia_invasion_of_ukraine_live_thread/")
view(getcontent$comments)
content <- getcontent$comments
graph <- construct_graph(content, plot = TRUE)
view(content)
graph <- construct_graph(content, plot = TRUE)
user <- user_network(content, include_author = TRUE, agg = TRUE)
sentiment <- analyzeSentiment(content$comment)
sentiment$sentimentQDAP
sentiment$SentimentQDAP
sentiment <- analyzeSentiment(content$comment)
sentiment$SentimentQDAP
library(SentimentAnalysis)
content <- getcontent$comments
sentiment <- analyzeSentiment(content$comment)
install.packages('sentimentr')
sentiment_by("I am having a good one", by = NULL)
sentiment("I am having a good one")
library(sentimentr)
sentiment("I am having a good one")
sentiment(content$comment)
sent <- sentiment(content$comment)
sent <- sentiment(content$comment)
view(sent)
view(sent)
content <- as.tibble(getcontent$comments)
content <- as_tibble(getcontent$comments)
content
content <- as_tibble(getcontent$comments)
head(content)
dim(content)
dim(content)
head(content)
head(sent)
view(sent)
ggplot(data = sent) +
geom_histogram(mapping = aes(x=sentiment))
sent %>%
filter(word_count > 1) -> sent
ggplot(data = sent) +
geom_histogram(mapping = aes(x=sentiment))
view(sent)
sent %>%
filter(word_count > 1) -> sent  #We are excluding words of length = 1 because these represents deleted comments.
ggplot(data = sent) +
geom_histogram(mapping = aes(x=sentiment))
sent %>%
filter(word_count > 3) -> sent  #We are excluding words of length = 1 because these represents short and irrelevant responses.
ggplot(data = sent) +
geom_histogram(mapping = aes(x=sentiment))
sent %>%
filter(word_count > 3) -> sent  #We are excluding words of length = 1 because these represents short and irrelevant responses.
# Example: Thank you, very true, deleted(when a comment is deleted), etc.
ggplot(data = sent) +
geom_histogram(mapping = aes(x=sentiment))+
labs(y = "Count", x = "Sentiment", title = "Histogram of Sentiment Scores")
# Example: Thank you, very true, deleted(when a comment is deleted), etc.
ggplot(data = sent) +
geom_histogram(mapping = aes(x=sentiment), color = "blue")+
labs(y = "Count", x = "Sentiment", title = "Histogram of Sentiment Scores")
# Example: Thank you, very true, deleted(when a comment is deleted), etc.
ggplot(data = sent) +
geom_histogram(mapping = aes(x=sentiment), color = "blue", fill = "gray")+
labs(y = "Count", x = "Sentiment", title = "Histogram of Sentiment Scores")
summary(sent)
ggplot(data = sent) +
geom_point(mapping = aes(x = word_count, y = sentiment))
ggplot(data = sent) +
geom_point(mapping = aes(x = word_count, y = sentiment)) +
geom_smooth(method = lm,se=F,aes(group=1),color='blue')
ggplot(data = sent) +
geom_point(mapping = aes(x = word_count, y = sentiment)) +
geom_smooth()
ggplot(data = sent) +
geom_point(mapping = aes(x = word_count, y = sentiment))
ggplot(data = sent) +
geom_point(mapping = aes(x = word_count, y = sentiment)) +
labs(y = "Sentiment Scores" y = "Length of Words per Sentence")
ggplot(data = sent) +
geom_point(mapping = aes(x = word_count, y = sentiment)) +
labs(y = "Sentiment Scores", y = "Length of Words per Sentence")
ggplot(data = sent) +
geom_point(mapping = aes(x = word_count, y = sentiment)) +
labs(y = "Sentiment Scores", x = "Length of Words per Sentence")
lm1 <- lm(sent$sentiment ~ sent$word_count)
summary(lm1)
ggplot(data = sent) +
geom_point(mapping = aes(x = word_count, y = sentiment)) +
labs(y = "Sentiment Scores", x = "Length of Words per Sentence", title = "Sentiment Scores vs Word Count")
knitr::opts_chunk$set(echo       = params$solutions,
eval       = params$solutions,
fig.align  = "center",
fig.height = 3,
fig.width  = 5)
sout <- summary(lm(mpg ~ wt, data = mtcars))
class(bsout)
class(sout)
bsout <- splines::bs(x = mtcars$wt, df = 10)
class(bsout)
typeof(sout)
attributes(sout)
attributes(sout)
sloop::s3_methods_class("summary.lm")
sloop::otype(lmout)
sloop::ftype(lmout)
sloop::otype(lmout)
sloop::ftype(lmout)
lmout <- lm(mpg ~ wt + am, data = mtcars)
library(sloop)
sloop::otype(lmout)
sloop::ftype(lmout)
class(lmout)
typeof(lmout)
bslm <- function(x, y, B = 1000, alpha = 0.05) {
lminit <- lm(y ~ x)
yhat <- fitted(lminit)
rvec <- resid(lminit)
b0vec <- rep(NA_real_, length.out = B)
b1vec <- rep(NA_real_, length.out = B)
for (i in seq_len(B)) {
ynew <- yhat + sample(rvec, replace = TRUE)
lmnew <- lm(ynew ~ x)
b0vec[[i]] <- coef(lmnew)[[1]]
b1vec[[i]] <- coef(lmnew)[[2]]
}
retlist <- list(
b0 = quantile(x = b0vec, probs = c(alpha / 2, 1 - alpha/2)),
b1 = quantile(x = b1vec, probs = c(alpha / 2, 1 - alpha/2))
)
return(retlist)
}
bslm(x = mtcars$wt, y = mtcars$mpg, B = 10000)
bslm.names()
names.bslm()
bslm <- function(x, y, B = 1000, alpha = 0.05) {
lminit <- lm(y ~ x)
yhat <- fitted(lminit)
rvec <- resid(lminit)
b0vec <- rep(NA_real_, length.out = B)
b1vec <- rep(NA_real_, length.out = B)
for (i in seq_len(B)) {
ynew <- yhat + sample(rvec, replace = TRUE)
lmnew <- lm(ynew ~ x)
b0vec[[i]] <- coef(lmnew)[[1]]
b1vec[[i]] <- coef(lmnew)[[2]]
}
retlist <- list(
b0 = quantile(x = b0vec, probs = c(alpha / 2, 1 - alpha/2)),
b1 = quantile(x = b1vec, probs = c(alpha / 2, 1 - alpha/2))
)
return(retlist)
}
names.bslm()
sloop::otype(lmout)
sloop::ftype(lmout)
typeof(lmout)
attributes(lmout)
attributes(bslm)
typeof(bslm)
bslm(x = mtcars$wt, y = mtcars$mpg, B = 10000)
bslm$b0
bslm['b0']
class(lmout)
sloop::otype(lmout)
typeof(bslm)
class(bslm)
sloop::otype(bslm)
shiny::runApp('D:/hw05-dbernal1/dc_energy')
runApp('D:/hw05-dbernal1/dc_energy')
energy
runApp('D:/hw05-dbernal1/dc_energy')
energy
# Transforming the data
df <- read_rds("~/data/energy_year.rds")
energy <- df %>%
mutate(Era =  case_when(Built < 1900 ~ "Pre-1900",
Built < 1951 ~ "Early-Mid 20th",
Built < 2000 ~ "Late 20th",
Built < 2011 ~ "Aughts",
Built > 2010 ~ "Teens and later")) %>%
mutate(Era = replace_na(Era, "Teens and later")) %>%
mutate(Report_Year = factor(Report_Year),
Type_SS = factor(Type_SS),
Type_EPA = factor(Type_EPA),
Metered_Energy = factor(Metered_Energy),
Metered_Water = factor(Metered_Water),
Era = factor(Era))
energy
runApp('D:/hw05-dbernal1/dc_energy')
typeof(energy$Report_Year)
# Transforming the data
df <- read_rds("~/data/energy_year.rds")
energy <- df %>%
mutate(Era =  case_when(Built < 1900 ~ "Pre-1900",
Built < 1951 ~ "Early-Mid 20th",
Built < 2000 ~ "Late 20th",
Built < 2011 ~ "Aughts",
Built > 2010 ~ "Teens and later")) %>%
mutate(Era = replace_na(Era, "Teens and later")) %>%
col_types = cols("Report_Year" = col_factor(),
"Type_SS" = col_factor(),
"Type_EPA" = col_factor(),
"Metered_Energy" = col_factor(),
"Metered_Water" = col_factor(),
"Era" = col_factor())
energy <- df %>%
mutate(Era =  case_when(Built < 1900 ~ "Pre-1900",
Built < 1951 ~ "Early-Mid 20th",
Built < 2000 ~ "Late 20th",
Built < 2011 ~ "Aughts",
Built > 2010 ~ "Teens and later"))
energy <- df %>%
mutate(Era =  case_when(Built < 1900 ~ "Pre-1900",
Built < 1951 ~ "Early-Mid 20th",
Built < 2000 ~ "Late 20th",
Built < 2011 ~ "Aughts",
Built > 2010 ~ "Teens and later")) %<%
mutate(Era = replace_na(Era, "Teens and later"))
energy <- df %>%
mutate(Era =  case_when(Built < 1900 ~ "Pre-1900",
Built < 1951 ~ "Early-Mid 20th",
Built < 2000 ~ "Late 20th",
Built < 2011 ~ "Aughts",
Built > 2010 ~ "Teens and later")) %>%
mutate(Era = replace_na(Era, "Teens and later"))
energy <- df %>%
mutate(Era =  case_when(Built < 1900 ~ "Pre-1900",
Built < 1951 ~ "Early-Mid 20th",
Built < 2000 ~ "Late 20th",
Built < 2011 ~ "Aughts",
Built > 2010 ~ "Teens and later")) %>%
mutate(Era = replace_na(Era, "Teens and later")) %>%
col_types = cols("Report_Year" = col_factor(),
"Type_SS" = col_factor(),
"Type_EPA" = col_factor(),
"Metered_Energy" = col_factor(),
"Metered_Water" = col_factor(),
"Era" = col_factor())
energy
energy <- df %>%
mutate(Era =  case_when(Built < 1900 ~ "Pre-1900",
Built < 1951 ~ "Early-Mid 20th",
Built < 2000 ~ "Late 20th",
Built < 2011 ~ "Aughts",
Built > 2010 ~ "Teens and later")) %>%
mutate(Era = replace_na(Era, "Teens and later"))
energy
energy <- col_types = cols("Report_Year" = col_factor(),
"Type_SS" = col_factor(),
"Type_EPA" = col_factor(),
"Metered_Energy" = col_factor(),
"Metered_Water" = col_factor(),
"Era" = col_factor())
# Transforming the data
df <- read_rds("~/data/energy_year.rds")
energy <- df %>%
mutate(Era =  case_when(Built < 1900 ~ "Pre-1900",
Built < 1951 ~ "Early-Mid 20th",
Built < 2000 ~ "Late 20th",
Built < 2011 ~ "Aughts",
Built > 2010 ~ "Teens and later")) %>%
mutate(Era = replace_na(Era, "Teens and later"))
energy <- (col_types = cols("Report_Year" = col_factor(),
"Type_SS" = col_factor(),
"Type_EPA" = col_factor(),
"Metered_Energy" = col_factor(),
"Metered_Water" = col_factor(),
"Era" = col_factor()))
energy
# Transforming the data
df <- read_rds("~/data/energy_year.rds")
energy <- df %>%
mutate(Era =  case_when(Built < 1900 ~ "Pre-1900",
Built < 1951 ~ "Early-Mid 20th",
Built < 2000 ~ "Late 20th",
Built < 2011 ~ "Aughts",
Built > 2010 ~ "Teens and later")) %>%
mutate(Era = replace_na(Era, "Teens and later")) %>%
mutate(Report_Year = factor(Report_Year),
Type_SS = factor(Type_SS),
Type_EPA = factor(Type_EPA),
Metered_Energy = factor(Metered_Energy),
Metered_Water = factor(Metered_Water),
Era = factor(Era))
energy
col_types(energy)
class(energy)
sapply(energy, typeof)
runApp('D:/hw05-dbernal1/dc_energy')
runApp('D:/hw05-dbernal1/dc_energy')
runApp('D:/hw05-dbernal1/dc_energy')
runApp('D:/hw05-dbernal1/dc_energy')
library(shiny); runApp('D:/gp-004-ypd-crime/R/app_test.R')
library(shiny); runApp('D:/gp-004-ypd-crime/R/app_test.R')
runApp('D:/gp-004-ypd-crime/R/app_test.R')
runApp('D:/gp-004-ypd-crime/R/app_test.R')
runApp('D:/gp-004-ypd-crime/R/app_test.R')
setwd("D:/gp-004-ypd-crime")
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
runApp('R/app_test.R')
setwd("D:/datascience/gp-004-ypd-crime")
runApp('R/app_test.R')
